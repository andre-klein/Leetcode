# Solution 1:

class MinStack:

    def __init__(self):
        self.stack = []
        self.rStack = []

    def push(self, val: int) -> None:
        self.stack.append(val)
        if self.rStack and val > self.rStack[-1]:
            self.rStack.append(self.rStack[-1])
        else:
            self.rStack.append(val)
        
    def pop(self) -> None:
        self.stack.pop()
        self.rStack.pop()

    def top(self) -> int:
        return self.stack[-1]

    def getMin(self) -> int:
        return self.rStack[-1]

# Solution 2:

class MinStack:

    def __init__(self):
        self.stack = []
        self.rStack = []

    def push(self, val: int) -> None:
        self.stack.append(val)
        if not self.rStack or val <= self.rStack[-1]:
            self.rStack.append(val)
        
    def pop(self) -> None:
        if self.stack.pop() == self.rStack[-1]:
            self.rStack.pop()

    def top(self) -> int:
        return self.stack[-1]

    def getMin(self) -> int:
        return self.rStack[-1]
