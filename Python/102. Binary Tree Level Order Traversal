# Solution 1:

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
from collections import deque
class Solution:
    def levelOrder(self, root: Optional[TreeNode]) -> List[List[int]]:
        if not root: return root
        q, res = deque([root]), []
        cur_count, next_count = 1, 0
        
        while q:
            res.append([])
            while cur_count > 0:
                cur = q.popleft()
                if cur.left:
                    q.append(cur.left)
                    next_count += 1
                if cur.right:
                    q.append(cur.right)
                    next_count += 1
                res[-1].append(cur.val)
                cur_count -= 1
            cur_count, next_count = next_count, 0
        
        return res

# Solution 2 (not super efficient):

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def levelOrder(self, root: Optional[TreeNode]) -> List[List[int]]:
        if not root:
            return []
        queue = [[root]]
        while len(queue[-1]) != 0:
            queue.append([])
            for i, node in enumerate(queue[-2]):
                if node.left:
                    queue[-1].append(node.left)
                if node.right:
                    queue[-1].append(node.right)
                queue[-2][i] = node.val
        queue.pop()
        return queue

# Solution 3 (most efficient one):

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def levelOrder(self, root: Optional[TreeNode]) -> List[List[int]]:
        if not root:
            return []
        res, cur = [], [root]
        while cur:
            res.append([node.val for node in cur])
            temp = []
            for node in cur:
                if node.left:
                    temp.append(node.left)
                if node.right:
                    temp.append(node.right)
            cur = temp
        return res
