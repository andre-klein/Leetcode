# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def isValidBST(self, root: Optional[TreeNode]) -> bool:
        def dfs(node):
            rVal = [True, node.val, node.val]
            if node.left:
                left = dfs(node.left)
                rVal = [left[0] and left[1] < node.val > left[2], min(rVal[1], left[1]), max(rVal[2], left[2])]
            if node.right:
                right = dfs(node.right)
                rVal = [rVal[0] and right[0] and right[2] > node.val < right[1], min(rVal[1], right[1]), max(rVal[2], right[2])]
            return rVal

        return dfs(root)[0]
        
# Second DFS approach
class Solution:
    def isValidBST(self, root: Optional[TreeNode]) -> bool:
        def dfs(node, left, right):
            if not node: return True
            if not (left < node.val < right): return False
            return dfs(node.right, node.val, right) and dfs(node.left, left, node.val)
        return dfs(root, float('-inf'), float('inf'))
