# recurrence: Let L[i] = max totalFuel using i stops s.t. 0 <= i <= len(stations)
# base case: L[0] = startFuel
# subproblems: L[i] = max_j(L[i+1], L[i+1] + stationFuel) 0 <= i <= len(stations)

class Solution:
    def minRefuelStops(self, target: int, startFuel: int, stations: List[List[int]]) -> int:
        L = [startFuel] + [0] * len(stations)
        for numStop, (stationLocation, stationFuel) in enumerate(stations):
            for j in range(numStop, -1, -1):
                if L[j] >= stationLocation:
                    L[j+1] = max(L[j+1], L[j] + stationFuel)
                
        for numStop, totalFuel in enumerate(L):
            if totalFuel >= target:
                 return numStop
        
        return -1
