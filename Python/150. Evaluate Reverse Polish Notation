# Solution 1:

class Solution:
    def evalRPN(self, tokens: List[str]) -> int:

        res = []
        for token in tokens:
            if token == '+':
                res.append(res.pop() + res.pop())
            elif token == '-':
                res.append(-res.pop() + res.pop())
            elif token == '*':
                res.append(res.pop() * res.pop())
            elif token == '/':
                res.append(int((1/res.pop()) * res.pop()))
            else:
                res.append(int(token))
        
        return res.pop()

# Solution 2:

class Solution:
    def evalRPN(self, tokens: List[str]) -> int:
        stack = []
        op = {"+": lambda a,b: a+b, "-": lambda a,b: a-b, "*": lambda a,b: a*b, "/": lambda a,b: int(a/b)}
        for token in tokens:
            if token in {"+", "-", "*", "/"}:
                second, first = stack.pop(), stack.pop()
                stack.append(op[token](first, second))
            else:
                stack.append(int(token))
        return stack[0]
