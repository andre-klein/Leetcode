class LRUCache:

    def __init__(self, capacity: int):
        self.size = capacity
        self.cache = {-1:[None,None,-2], -2:[None,-1,None]} # key:[value,prev,next]

    def insert(self, key, val):
        prv = self.cache[-2][1]
        self.cache[prv][2], self.cache[-2][1] = key, key
        self.cache[key] = [val, prv, -2]
    
    def remove(self, key):
        prv, nxt = self.cache[key][1], self.cache[key][2]
        self.cache[prv][2], self.cache[nxt][1] = nxt, prv
        del self.cache[key]

    def get(self, key: int) -> int:
        if key not in self.cache:
            return -1
        else:
            val = self.cache[key][0]
            self.remove(key)
            self.insert(key, val)
            return val

    def put(self, key: int, value: int) -> None:
        if key in self.cache:
            self.remove(key)
        if len(self.cache) == self.size + 2:
            self.remove(self.cache[-1][2])
            self.insert(key, value)
        else:
            self.insert(key, value)
