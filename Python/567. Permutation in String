# Solution 1

class Solution:
    def checkInclusion(self, s1: str, s2: str) -> bool:
        count, window = {}, {}
        l = 0
        for char in s1:
            count[char] = count.get(char, 0) + 1
        for r, char in enumerate(s2):
            window[char] = window.get(char, 0) + 1
            if r - l + 1 == len(s1):
                if window == count:
                    return True
                cur = s2[l]
                window[cur] -= 1
                if window[cur] == 0:
                    del window[cur]
                l += 1
        return False

# Solution 2

class Solution:
    def checkInclusion(self, s1: str, s2: str) -> bool:
        count, window = {}, {}
        l, matches = 0, 0
        for char in s1:
            count[char] = count.get(char, 0) + 1
        for r, char in enumerate(s2):
            window[char] = window.get(char, 0) + 1
            if char in count and window[char] == count[char]:
                matches += 1
            if r - l + 1 == len(s1):
                if matches == len(count):
                    return True
                left = s2[l]
                if left in count and window[left] == count[left]:
                    matches -= 1
                window[left] -= 1
                l += 1
        return False

# Solution 3:

class Solution:
    def checkInclusion(self, s1: str, s2: str) -> bool:
        count, window, l = [0] * 26, [0] * 26, 0

        for char in s1:
            count[ord(char) - ord('a')] += 1

        for r, char in enumerate(s2):
            window[ord(char) - ord('a')] += 1
            if r - l + 1 > len(s1):
                window[ord(s2[l]) - ord('a')] -= 1
                l += 1
            if r - l + 1 == len(s1) and window == count:
                return True
        return False

# Solution 4

class Solution:
    def checkInclusion(self, s1: str, s2: str) -> bool:
        count, window, l, matches = [0] * 26, [0] * 26, 0, 0

        for char in s1:
            count[ord(char) - ord('a')] += 1
        total = sum(1 for x in count if x != 0)

        for r, char in enumerate(s2):
            idx = ord(char) - ord('a')
            window[idx] += 1
            if window[idx] == count[idx]:
                matches += 1
            if r - l + 1 == len(s1):
                if matches == total:
                    return True
                idx = ord(s2[l]) - ord('a')
                if window[idx] == count[idx]:
                    matches -= 1
                window[idx] -= 1
                l += 1
        return False
