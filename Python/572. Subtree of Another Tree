# Solution 1 (Not the best solution but was first attempt):

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def isSubtree(self, root: Optional[TreeNode], subRoot: Optional[TreeNode]) -> bool:
        if not subRoot:
            return True
        if not root:
            return False
        res = [False]
        def dfs(r1, r2):
            if r1 and r2 and r1.val == r2.val:
                dfs(r1.left, r2.left)
                dfs(r1.right, r2.right)
            elif r1 or r2:
                res[0] = False
        if root.val == subRoot.val:
            res = [True]
            dfs(root, subRoot)
        return res[0] or self.isSubtree(root.left, subRoot) or self.isSubtree(root.right, subRoot)

# Solution 2:

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def isSubtree(self, root: Optional[TreeNode], subRoot: Optional[TreeNode]) -> bool:
        if not subRoot:
            return True
        if not root:
            return False
        def dfs(p, q):
            if not (p or q):
                return True
            if not (p and q) or p.val != q.val:
                return False
            return dfs(p.left, q.left) and dfs(p.right, q.right)
        if root.val == subRoot.val and dfs(root, subRoot):
            return True
        return self.isSubtree(root.left, subRoot) or self.isSubtree(root.right, subRoot)

# Solution 3 (most efficient):

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def isSubtree(self, root: Optional[TreeNode], subRoot: Optional[TreeNode]) -> bool:
        def serialize(node):
            if not node:
                return ",#"
            return f",{node.val}{serialize(node.left)}{serialize(node.right)}"
        return serialize(subRoot) in serialize(root)
