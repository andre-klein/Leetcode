class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
        count = 0

        def dfs(r, c):
            if r > 0 and (r-1, c) and grid[r-1][c] == '1':
                grid[r-1][c] = 0
                dfs(r-1, c)
            if r < len(grid)-1 and (r+1, c) and grid[r+1][c] == '1':
                grid[r+1][c] = 0
                dfs(r+1, c)
            if c > 0 and (r, c-1) and grid[r][c-1] == '1':
                grid[r][c-1] = 0
                dfs(r, c - 1)
            if c < len(grid[0])-1 and grid[r][c+1] == '1':
                grid[r][c+1] = 0
                dfs(r, c + 1)

        for r in range(len(grid)):
            for c in range(len(grid[0])):
                if grid[r][c] == '1':
                    count += 1
                    dfs(r, c)

        return count
        
# BFS
class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
        count = 0
        
        def bfs(r, c):
            q = collections.deque()
            q.append((r, c))
            while q:
                for i in range(len(q)):
                    r, c = q.popleft()
                    if r > 0 and (r-1, c) and grid[r-1][c] == '1':
                        grid[r-1][c] = 0
                        q.append((r-1, c))
                    if r < len(grid)-1 and (r+1, c) and grid[r+1][c] == '1':
                        grid[r+1][c] = 0
                        q.append((r+1, c))
                    if c > 0 and (r, c-1) and grid[r][c-1] == '1':
                        grid[r][c-1] = 0
                        q.append((r, c-1))
                    if c < len(grid[0])-1 and (r, c+1) and grid[r][c+1] == '1':
                        grid[r][c+1] = 0
                        q.append((r, c+1))

        for r in range(len(grid)):
            for c in range(len(grid[0])):
                if grid[r][c] == '1':
                    bfs(r, c)
                    count += 1

        return count
